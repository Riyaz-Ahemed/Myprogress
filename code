 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather & Chatbot App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #74ebd5, #acb6e5);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .weather-card {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 20px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            text-align: center;
            margin-bottom: 20px;
            transition: transform 0.3s;
        }

        .weather-card:hover {
            transform: translateY(-5px);
        }

        .weather-card h2 {
            font-size: 1.8rem;
            color: #333;
            margin-bottom: 10px;
        }

        .weather-card .weather-icon {
            font-size: 3rem;
            margin: 10px 0;
        }

        .weather-card p {
            font-size: 1.1rem;
            color: #555;
            margin: 5px 0;
        }

        .error {
            color: #d32f2f;
            font-size: 1rem;
        }

        .chat-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #6200ea;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            transition: background 0.3s;
        }

        .chat-button:hover {
            background: #3700b3;
        }

        .chat-container {
            display: none;
            position: fixed;
            bottom: 100px;
            right: 20px;
            width: 90%;
            max-width: 400px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            background: #6200ea;
            color: white;
            padding: 10px;
            font-size: 1.2rem;
            text-align: center;
        }

        .chat-body {
            height: 300px;
            overflow-y: auto;
            padding: 10px;
            background: #f5f5f5;
        }

        .message {
            margin: 10px;
            padding: 10px;
            border-radius: 10px;
            max-width: 80%;
        }

        .user-message {
            background: #e3f2fd;
            margin-left: 20%;
        }

        .ai-message {
            background: #fff;
            margin-right: 20%;
            border: 1px solid #ddd;
        }

        .typing-indicator {
            display: none;
            margin: 10px;
            padding: 10px;
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 10px;
            margin-right: 20%;
        }

        .typing-indicator span {
            animation: blink 1s infinite;
            display: inline-block;
        }

        .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
        .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.2; }
        }

        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #ddd;
            background: white;
        }

        .chat-input input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }

        .chat-input button {
            background: #6200ea;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-left: 10px;
            border-radius: 20px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .chat-input button:hover {
            background: #3700b3;
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .weather-card {
                padding: 15px;
            }

            .weather-card h2 {
                font-size: 1.5rem;
            }

            .weather-card .weather-icon {
                font-size: 2.5rem;
            }

            .weather-card p {
                font-size: 1rem;
            }

            .chat-container {
                bottom: 80px;
                right: 10px;
                width: 95%;
            }

            .chat-body {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="weather-card">
        <h2>Weather in <span id="location">Loading...</span></h2>
        <div class="weather-icon" id="weather-icon">‚è≥</div>
        <p>Temperature: <span id="temperature">Loading...</span></p>
        <p>Feels Like: <span id="feels-like">Loading...</span></p>
        <p>Condition: <span id="condition">Loading...</span></p>
        <p>Humidity: <span id="humidity">Loading...</span></p>
        <p>Wind Speed: <span id="wind-speed">Loading...</span></p>
        <p class="error" id="error" style="display: none;"></p>
    </div>

    <button class="chat-button" onclick="toggleChat()">üí¨</button>

    <div class="chat-container" id="chat-container">
        <div class="chat-header">Chatbot</div>
        <div class="chat-body" id="chat-body">
            <div class="ai-message">Hello! How can I assist you today? üòä</div>
            <div class="typing-indicator" id="typing-indicator">
                AI is typing<span>.</span><span>.</span><span>.</span>
            </div>
        </div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type your message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const WEATHER_API_KEY = '3d89e03480082dc764eea33e71360cac'; // Replace with your OpenWeatherMap API key
        const GEMINI_API_KEY = ' AIzaSyCCv-Q-7ik40rVPzi5MbxwTBuF7BU8cIV0'; // Replace with your Gemini API key
        const weatherIcon = document.getElementById('weather-icon');
        const locationEl = document.getElementById('location');
        const temperatureEl = document.getElementById('temperature');
        const feelsLikeEl = document.getElementById('feels-like');
        const conditionEl = document.getElementById('condition');
        const humidityEl = document.getElementById('humidity');
        const windSpeedEl = document.getElementById('wind-speed');
        const errorEl = document.getElementById('error');
        const chatContainer = document.getElementById('chat-container');
        const chatBody = document.getElementById('chat-body');
        const userInput = document.getElementById('user-input');
        const typingIndicator = document.getElementById('typing-indicator');
        let currentTemperature = 'Unknown'; // Store current temperature

        // Weather Emojis Mapping
        const weatherEmojis = {
            'Clear': '‚òÄÔ∏è',
            'Clouds': '‚õÖ',
            'Rain': 'üåßÔ∏è',
            'Drizzle': 'üå¶Ô∏è',
            'Thunderstorm': '‚õàÔ∏è',
            'Snow': '‚ùÑÔ∏è',
            'Mist': 'üå´Ô∏è',
            'Fog': 'üå´Ô∏è',
        };

        // Fetch Weather Data
        function fetchWeather(lat, lon) {
            fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${WEATHER_API_KEY}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch weather data');
                    return response.json();
                })
                .then(data => {
                    locationEl.textContent = data.name || 'Unknown Location';
                    currentTemperature = `${Math.round(data.main.temp)}¬∞C`; // Store temperature
                    temperatureEl.textContent = currentTemperature;
                    feelsLikeEl.textContent = `${Math.round(data.main.feels_like)}¬∞C`;
                    const condition = data.weather[0].main;
                    conditionEl.textContent = condition;
                    humidityEl.textContent = `${data.main.humidity}%`;
                    windSpeedEl.textContent = `${Math.round(data.wind.speed)} m/s`;
                    weatherIcon.textContent = weatherEmojis[condition] || 'üåà';
                    errorEl.style.display = 'none';
                })
                .catch(error => {
                    errorEl.textContent = 'Error: Could not fetch weather data. Please try again.';
                    errorEl.style.display = 'block';
                    console.error(error);
                });
        }

        // Get User's Location
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                position => {
                    const { latitude, longitude } = position.coords;
                    fetchWeather(latitude, longitude);
                },
                error => {
                    errorEl.textContent = 'Error: Location access denied. Please enable location services.';
                    errorEl.style.display = 'block';
                    console.error(error);
                }
            );
        } else {
            errorEl.textContent = 'Error: Geolocation not supported by your browser.';
            errorEl.style.display = 'block';
        }

        // Chatbot Functions
        function toggleChat() {
            chatContainer.style.display = chatContainer.style.display === 'none' ? 'flex' : 'none';
        }

        function addMessage(content, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            messageDiv.textContent = content;
            chatBody.appendChild(messageDiv);
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        async function sendMessage() {
            const message = userInput.value.trim();
            if (!message) return;

            addMessage(message, true);
            userInput.value = '';

            // Show typing indicator
            typingIndicator.style.display = 'block';
            chatBody.scrollTop = chatBody.scrollHeight;

            // Call Gemini API
            try {
                const response = await fetch(
                    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
                    {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
 bibliotec
                        },
                        body: JSON.stringify({
                            contents: [{
                                parts: [{
                                    text: `Based on the current temperature ${currentTemperature} ${message}`
                                }]
                            }]
                        })
                    }
                );

                if (!response.ok) {
                    throw new Error(`Gemini API request failed: ${response.statusText}`);
                }

                const data = await response.json();
                const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || 'No response from AI';
                
                // Hide typing indicator and show AI response
                typingIndicator.style.display = 'none';
                addMessage(aiResponse, false);
            } catch (error) {
                console.error('Error:', error);
                typingIndicator.style.display = 'none';
                addMessage('Error: Could not get a response from the AI.', false);
            }
        }

        // Send message on Enter key
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });
    </script>
</body>
</html>